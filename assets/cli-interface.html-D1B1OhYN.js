import{_ as e,o as c,c as a,e as o}from"./app-DE99FDxf.js";const t={},r=o('<h1 id="命令行直接打包" tabindex="-1"><a class="header-anchor" href="#命令行直接打包" aria-hidden="true">#</a> 命令行直接打包</h1><blockquote><p>此功能需要管理端 1.1.4 或者更高版本</p></blockquote><p>有时候，你可能需要一个命令行就能启动管理端并且直接进入打包过程，而不是手动输入c然后输入版本号，这样显然对脚本调用管理端不友好</p><p>从管理端 1.1.4 开始，新增了一个叫“预输入”的特性，这个特性可以让程序的启动参数直接变成后续的输入</p><p>举个栗子，创建一个新版本，通常要先输入c进入创建模式，然后输入2.0这么一个版本号，最后还要在输入y来确认</p><p>现在有了预输入这个特性之后，在启动管理端的时候，直接使用<code>java -jar manager.jar c 2.0 y n q</code>就能一键创建好一个新版本，无需任何键盘输入</p><p>后面的运行参数<code>c 2.0 y n q</code>表示这四个参数会依次被模拟成你的手动输入，这对使用脚本调用管理端打包的场景来说非常有用（参数分隔是空格，因此版本号如果包含空格会导致解析失败）</p><p>脚本在打包完成之后，可以通过检查管理端的进程退出代码（exit code）来判断打包是否成功，成功会返回0，其它非0值均代表打包失败。打包失败通常是版本号冲突</p><h3 id="小细节" tabindex="-1"><a class="header-anchor" href="#小细节" aria-hidden="true">#</a> 小细节</h3><ol><li>预输入参数的最后面一定要跟上一个<code>q</code>，否则程序在打包完成后，仍会停留在交互式模式下，无法正常退出！</li><li>使用预输入参数进行打包之前，脚本可以先把更新记录写入<code>changelogs.txt</code>文件，再进行打包。因为使用预输入参数进行打包时，没法手动输入更新记录，更新记录只能提前准备好</li><li>脚本可以在打包之前，使用<code>java -jar manage.jar s q</code>来输出一下文件修改列表。而不必进入真正的打包过程，这对想要先审阅文件修改列表，再进行打包的脚本来说非常有用</li></ol>',10),d=[r];function i(n,l){return c(),a("div",null,d)}const h=e(t,[["render",i],["__file","cli-interface.html.vue"]]);export{h as default};
