import{_ as e,o as t,c as r,e as i}from"./app-DE99FDxf.js";const o={},a=i('<h1 id="管理端overwrites-txt" tabindex="-1"><a class="header-anchor" href="#管理端overwrites-txt" aria-hidden="true">#</a> 管理端overwrites.txt</h1><p>管理端overwrites是保存文件强制覆盖规则的地方。可以让某些文件在更新时每次都全量打包，而不是只记录增量信息</p><p>这样即使客户端某些文件被人为修改或者删除，利用这个功能也可以强制更新这些“有问题”的文件。当然前提是这个文件被修改过，如果没有服务端修改，它还是不会被打包的，所以不用担心流量消耗的问题</p><p>使用方法很简单，在管理端程序旁边创建一个叫<code>overwrites.txt</code>的文件，在这个文件里一行行写上要覆盖的文件路径就可以了</p><p>一些注意的地方：</p><ul><li>注意路径分隔符需要使用正斜线（Windows上也是如此）</li><li>目前还不支持注释语法，但空行会被忽略</li></ul><p>从管理端1.1.10版本开始更换了文件语法，因此请按不同的版本阅读下方不同的教程</p><h3 id="管理端1-1-10和之后的版本" tabindex="-1"><a class="header-anchor" href="#管理端1-1-10和之后的版本" aria-hidden="true">#</a> 管理端1.1.10和之后的版本</h3><p>从1.1.10开始支持了Glob表达式，支持用简短的语法同时匹配多个文件，相比之前的纯文本匹配效率要高了不少</p><p>overwrites的语法和gitignore文件类似，每一行都是一条路径，下面是一些例子：</p><ul><li><code>.minecraft/saves/旧的世界/*</code>：让旧的世界这个目录下面所有的文件都被强制覆盖</li><li><code>.minecraft/options.txt</code>：精准匹配一个文件，让MC的设置文件被强制覆盖</li></ul><p>需要注意的是两个方括号<code>[]</code>在Glob表达式里有特别的意义，且没有转义字符可用，会导致匹配失败。所以请尽量把工作空间目录下文件名中带方括号的文件名换成不带方括号的，这样就可以避免出现这个问题</p><h3 id="管理端1-1-9和之前版本" tabindex="-1"><a class="header-anchor" href="#管理端1-1-9和之前版本" aria-hidden="true">#</a> 管理端1.1.9和之前版本</h3><p>管理端1.1.9和之前版本只能写单个文件，不支持目录和通配符等语法</p><p>比如添加这样一行：<code>.minecraft/saves/options.txt</code>，可以让MC设置文件每次都会全量打包</p><h3 id="进行测试" tabindex="-1"><a class="header-anchor" href="#进行测试" aria-hidden="true">#</a> 进行测试</h3><p>编写好了overwrites.txt文件之后，打开管理端，可以直接使用s命令来很方便地调试文件忽略成功了没有，如果文件匹配成功了，文件名后面会出现<code>（强制覆盖）</code>的字样，如果看不到则说明匹配失败了</p>',17),c=[a];function d(s,n){return t(),r("div",null,c)}const p=e(o,[["render",d],["__file","overwrites.html.vue"]]);export{p as default};
