import{_ as e,o as i,c as o,e as a}from"./app-DE99FDxf.js";const t={},c=a('<h1 id="管理端ignores-txt" tabindex="-1"><a class="header-anchor" href="#管理端ignores-txt" aria-hidden="true">#</a> 管理端ignores.txt</h1><p>管理端ignore机制类似于gitignore文件的用途。可以屏蔽掉工作空间目录下的一些文件或者目录让管理端看不到它们的存在，也就不会被打进更新包里</p><p>将客户端直接丢到工作空间目录下，或者用软链接链接过去的用户应该会用得上这个功能</p><p>使用方法很简单，在管理端程序旁边创建一个叫<code>ignores.txt</code>的文件，在这个文件里一行行写上要忽略的文件就可以了。</p><p>一些注意的地方：</p><ul><li>注意路径分隔符需要使用正斜线（Windows上也是如此）</li><li>目前还不支持注释语法，但空行会被忽略</li></ul><p>从管理端1.1.10版本开始更换了文件语法，因此请按不同的版本阅读下方不同的教程</p><h3 id="管理端1-1-10和之后的版本" tabindex="-1"><a class="header-anchor" href="#管理端1-1-10和之后的版本" aria-hidden="true">#</a> 管理端1.1.10和之后的版本</h3><p>从1.1.10开始支持了Glob表达式，支持用简短的语法同时匹配多个文件，相比之前的纯文本匹配效率要高了不少</p><p>ignores.txt的语法和gitignore文件类似，每一行都是一条路径，下面是一些例子：</p><ul><li><code>.minecraft/saves/旧的世界/*</code>：忽略旧的世界这个目录下面所有的文件不会被打包</li><li><code>.minecraft/options.txt</code>：精准匹配一个文件，让MC的设置文件不会被打包</li></ul><p>需要注意的是两个方括号<code>[]</code>在Glob表达式里有特别的意义，且没有转义字符可用，会导致匹配失败。所以请尽量把工作空间目录下文件名中带方括号的文件名换成不带方括号的，这样就可以避免出现这个问题</p><h3 id="管理端1-1-9和之前版本" tabindex="-1"><a class="header-anchor" href="#管理端1-1-9和之前版本" aria-hidden="true">#</a> 管理端1.1.9和之前版本</h3><p>比如添加这样一行：<code>.minecraft/saves/旧的世界</code>，可以让<code>旧的世界</code>这个目录不被打包</p><p>这样添加一行：<code>.minecraft/options.txt</code>，可以让MC设置文件不会被打包</p><p>ignores文件的写法有三种：</p><ul><li>精准匹配文件：<code>aaa/bbb.txt</code></li><li>精准匹配目录：<code>aaa/bbb/</code></li><li>模糊匹配文件或者目录：<code>aaa/bbb</code>（小提示：忽略目录应优先用这个方法，而不是上面那个）</li></ul><h3 id="进行测试" tabindex="-1"><a class="header-anchor" href="#进行测试" aria-hidden="true">#</a> 进行测试</h3><p>编写好了ignores文件之后，打开管理端，可以直接使用s命令来很方便地调试文件忽略成功了没有。当然用c命令也是没有问题的</p>',19),d=[c];function r(n,s){return i(),o("div",null,d)}const p=e(t,[["render",r],["__file","ignores.html.vue"]]);export{p as default};
