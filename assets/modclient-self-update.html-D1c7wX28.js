import{_ as e,o as t,c,e as o}from"./app-DE99FDxf.js";const d={},l=o('<h1 id="modclient自更新教程" tabindex="-1"><a class="header-anchor" href="#modclient自更新教程" aria-hidden="true">#</a> ModClient自更新教程</h1><p>借助ModClient的特殊能力，可以实现给McPatchClient.jar本身做自更新（即使McPatchClient.jar本身是不支持的）</p><p>下文中所指的<code>旧版列表文件</code>在不同的ModClient版本中，具体文件名不一样，请注意区分：</p><ul><li>在ModClient版本1.1.1和更早的版本中叫<code>OldBalloonUpdateFileName.txt</code></li><li>在ModClient版本1.1.1以后的版本中叫<code>OldClientFileName.txt</code>（不包括1.1.1版本本身）</li></ul><p>自更新教程：</p><p>准备好新版本客户端程序，并放在工作空间目录下，对应的原先旧版本客户端程序的位置的旁边</p><p>比如原先旧版在<code>.minecraft/旧版本.jar</code>，那么新版就要和旧版同目录放置：<code>.minecraft/新版本.jar</code></p><p>然后在工作空间目录下创建一个文本文件叫<code>.minecraft/旧版列表文件</code>（旧版列表文件这个名字在上文中有提到）</p><p>打开<code>旧版列表文件</code>，新增一行，将旧版的客户端程序的文件名添加一进去（这样做是为了让ModClientLoader自动删除旧版文件）如果有多个旧版，就一行一个</p><p>最后打包新版本，等待客户端更新</p>',10),a=[l];function i(n,r){return t(),c("div",null,a)}const s=e(d,[["render",i],["__file","modclient-self-update.html.vue"]]);export{s as default};
